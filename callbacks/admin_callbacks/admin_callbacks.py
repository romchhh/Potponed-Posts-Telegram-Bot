from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext, Dispatcher
from main import bot, dp
from states.admin_states import AdminState
from aiogram.dispatcher import FSMContext
from keyboards.user_keyboards import *
from data.texts import *
from database.user_db import *
from database.admin_db import *
import asyncio, re, os, logging
from keyboards.admin_keyboards import admin_keyboard
import locale
from functions.user_functions import *

# locale.setlocale(locale.LC_TIME, 'uk_UA.UTF-8')  
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


@dp.callback_query_handler(lambda c: c.data == 'admin_add')
async def add_admin(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    channels = get_user_channels(user_id)
    if not channels:
        add_channel_button = InlineKeyboardMarkup(row_width=1).add(
            InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞–Ω–∞–ª", callback_data="add_channel")
        )
        await callback_query.message.edit_text(no_channel_text, reply_markup=add_channel_button)
    else:
        channel_buttons = InlineKeyboardMarkup(row_width=2)
        for channel_id, channel_name in channels:
            channel_buttons.add(InlineKeyboardButton(channel_name, callback_data=f"addadmin_{channel_id}"))
        channel_buttons.add(InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞–Ω–∞–ª", callback_data="add_channel"))
        channel_buttons.add(InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="adminback"))
        
        await callback_query.message.edit_text("<b>–î–û–î–ê–í–ê–ù–ù–Ø –ê–î–ú–Ü–ù–Ü–°–¢–†–ê–¢–û–†–ê:</b>\n\n–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª, –≤ —è–∫–æ–º—É —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", parse_mode='HTML', reply_markup=channel_buttons)

    
    

@dp.callback_query_handler(lambda c: c.data.startswith("addadmin_"))
async def prompt_for_admin_username(callback_query: types.CallbackQuery, state: FSMContext):
    channel_id = callback_query.data.split("_")[1]  # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–∞–Ω–∞–ª—É –∑ –∫–æ–ª–±–µ–∫—É
    await state.update_data(channel_id=channel_id)  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –∫–∞–Ω–∞–ª—É –≤ —Å—Ç–∞–Ω

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    cancel_button = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="cancel_add_admin")
    )
    
    # –ü—Ä–æ—Å–∏–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ username –∞–±–æ –ø–µ—Ä–µ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await callback_query.message.edit_text(
        "<b>–î–û–î–ê–í–ê–ù–ù–Ø –ê–î–ú–Ü–ù–Ü–°–¢–†–ê–¢–û–†–ê:</b>\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å username –∞–±–æ –ø–µ—Ä–µ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –∞–¥–º—ñ–Ω–æ–º.", 
        parse_mode='HTML',
        reply_markup=cancel_button
    )
    
    await AdminState.waiting_for_admin_username.set()

@dp.message_handler(state=AdminState.waiting_for_admin_username, content_types=types.ContentTypes.TEXT)
async def process_admin_username(message: types.Message, state: FSMContext):
    if message.forward_from:
        user_id = message.forward_from.id
        username = message.forward_from.username
        
        user_data = await state.get_data()
        channel_id = user_data['channel_id']
    else:
        username = message.text.strip()
        user_id = get_user_id_by_name(username)  
        if user_id is None:
            await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ username @{username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–æ–≥–æ username.")
            await state.finish()
            return  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å, –Ω–µ –ø—Ä–æ–¥–æ–≤
        user_data = await state.get_data()
        channel_id = user_data['channel_id']
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —É —Å—Ç–∞–Ω –ø–µ—Ä–µ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º
    await state.update_data(user_id=user_id, username=username)

    # –Ü–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏" —Ç–∞ "–°–∫–∞—Å—É–≤–∞—Ç–∏"
    confirmation_buttons = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("‚úì –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm_add_admin"),
        InlineKeyboardButton("‚Üê –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_add_admin")
    )
    
    channel_name = get_channel_name_by_id(channel_id)
    await message.answer(
        f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ @{username} –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª—É <b>{channel_name}</b>?",
        reply_markup=confirmation_buttons
    )

@dp.callback_query_handler(lambda c: c.data == "confirm_add_admin", state=AdminState.waiting_for_admin_username)
async def confirm_add_admin(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    user_id = user_data['user_id']
    username = user_data['username']
    channel_id = user_data['channel_id']

    channel_name = get_channel_name_by_id(channel_id)  # —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –∫–∞–Ω–∞–ª—É
    link = get_channel_link_by_id(channel_id)  # —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª, —è–∫—â–æ —î

    add_admin_to_channel(channel_id, channel_name, user_id, link)

    await callback_query.message.edit_text(
        f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{username} –¥–æ–¥–∞–Ω–æ —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª <b>{channel_name}</b>.", parse_mode="HTML"
    )
    await state.finish()
    
    await bot.send_message(user_id, f"–í–∞—Å –¥–æ–¥–∞–Ω–æ —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª <b>{channel_name}</b>.", parse_mode="HTML")
@dp.callback_query_handler(lambda c: c.data == "cancel_add_admin", state=AdminState.waiting_for_admin_username)
async def cancel_add_admin(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()

    await callback_query.answer("–î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", show_alert=True)
    keyboard = admin_keyboard()
    await callback_query.message.edit_text("–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å üë®üèº‚Äçüíª", reply_markup=keyboard)  


@dp.callback_query_handler(lambda c: c.data == "cancel_add_admin", state=AdminState.waiting_for_admin_username)
async def cancel_add_admin(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    keyboard = admin_keyboard()
    await callback_query.message.edit_text("–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å üë®üèº‚Äçüíª", reply_markup=keyboard)  
    
    
@dp.callback_query_handler(lambda c: c.data == 'adminback')
async def add_admin(callback_query: types.CallbackQuery): 
    keyboard = admin_keyboard()
    await callback_query.message.edit_text("–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å üë®üèº‚Äçüíª", reply_markup=keyboard)  
    
def register_callbacks(dp: Dispatcher):
    dp.register_callback_query_handler(add_admin, lambda c: c.data == 'add_channel')


