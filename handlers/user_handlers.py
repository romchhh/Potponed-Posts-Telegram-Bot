from main import bot, dp, Dispatcher, scheduler
from filters.filters import *
from aiogram import types

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputFile

from database.user_db import *
from functions.user_functions import send_mailing
from keyboards.user_keyboards import get_start_keyboard, back_keyboard, generate_calendar
from keyboards.admin_keyboards import get_admin_keyboard, admin_keyboard
from data.texts import *
from states.user_states import EditPostState
import pytz

html = 'HTML'
tz_kiev = pytz.timezone('Europe/Kyiv')
current_time_kiev = datetime.now(tz_kiev).strftime("%H:%M")


async def scheduler_jobs():
    scheduler.add_job(send_mailing, "cron", minute=0) 
    scheduler.add_job(send_mailing, "cron", minute=15) 
    scheduler.add_job(send_mailing, "cron", minute=30) 
    scheduler.add_job(send_mailing, "cron", minute=45) 
    
async def antiflood(*args, **kwargs):
    m = args[0]
    await m.answer("–ù–µ —Å–ø–µ—à–∏ :)")

async def on_startup(dp):
    await scheduler_jobs()
    from handlers.user_handlers import dp as user_dp
    from callbacks.user_callbacks.user_callbacks import register_callbacks
    from callbacks.user_callbacks.shedule_callbacks import register_callbacks
    from callbacks.user_callbacks.change_post_callbacks import register_callbacks
    from callbacks.user_callbacks.create_post_callbacks import register_callbacks
    from callbacks.user_callbacks.templates_callbacks import register_callbacks
    from callbacks.admin_callbacks.admin_callbacks import register_callbacks
    register_callbacks(dp)
    me = await bot.get_me()
    # await bot.send_message(logs, f"–ë–æ—Ç @{me.username} –∑–∞–ø—É—â–µ–Ω–∏–π!")
    print(f"–ë–æ—Ç @{me.username} –∑–∞–ø—É—â–µ–Ω–∏–π!")

async def on_shutdown(dp):
    me = await bot.get_me()
    # await bot.send_message(logs, f'Bot: @{me.username} –∑—É–ø–∏–Ω–µ–Ω–∏–π!')
    print(f"Bot: @{me.username} –∑—É–ø–∏–Ω–µ–Ω–∏–π!")
    
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    user_name = message.from_user.username
    
    if user_id in administrators:
        keyboard = get_admin_keyboard()
    else:
        keyboard = get_start_keyboard()

    photo_path = 'data/hello.png'

    await message.answer_photo(
        photo=InputFile(photo_path), 
        caption=welcome_text, 
        parse_mode='HTML', 
        reply_markup=keyboard
    )

    add_user(user_id, user_name)

@dp.message_handler(lambda message: message.text == "–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å—Ç")
async def create_post(message: types.Message):
    user_id = message.from_user.id
    channels = get_user_channels(user_id)

    if not channels:
        add_channel_button = InlineKeyboardMarkup(row_width=1).add(
            InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞–Ω–∞–ª", callback_data="add_channel")
        )
        await message.answer(no_channel_text, reply_markup=add_channel_button)
    else:
        channel_buttons = InlineKeyboardMarkup(row_width=2)
        for channel_id, channel_name in channels:
            channel_buttons.add(InlineKeyboardButton(channel_name, callback_data=f"create_post_{channel_id}"))
        channel_buttons.add(InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞–Ω–∞–ª", callback_data="add_channel"))
        
        await message.answer("<b>–°–¢–í–û–†–ï–ù–ù–Ø –ü–û–°–¢–£:</b>\n\n–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª, –≤ —è–∫–æ–º—É —Ö–æ—á–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é.", parse_mode='HTML', reply_markup=channel_buttons)


@dp.message_handler(lambda message: message.text == "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ—Å—Ç")
async def create_post(message: types.Message):
    user_id = message.from_user.id
    channels = get_user_channels(user_id)

    if not channels:
        add_channel_button = InlineKeyboardMarkup(row_width=1).add(
            InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞–Ω–∞–ª", callback_data="add_channel")
        )
        await message.answer(no_channel_text, reply_markup=add_channel_button)
    else:
        await message.answer(
            "<b>–†–ï–î–ê–ì–£–í–ê–ù–ù–Ø –ü–û–°–¢–£:</b>\n\n–ü–µ—Ä–µ—à–ª—ñ—Ç—å –ø–æ—Å—Ç –∑ –≤–∞—à–æ–≥–æ –∫–∞–Ω–∞–ª—É, —è–∫–∏–π –≤–∏ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏.",
            parse_mode='HTML',
            reply_markup=back_keyboard()
        )
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω, —â–æ–± —á–µ–∫–∞—Ç–∏ –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–∏–π –ø–æ—Å—Ç
        await EditPostState.waiting_for_post.set()


@dp.message_handler(lambda message: message.text == "–ö–æ–Ω—Ç–µ–Ω—Ç –ø–ª–∞–Ω")
async def content_plan(message: types.Message):
    user_id = message.from_user.id
    channels = get_user_channels(user_id)

    if not channels:
        add_channel_button = InlineKeyboardMarkup(row_width=1).add(
            InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞–Ω–∞–ª", callback_data="add_channel")
        )
        await message.answer(no_channel_text, reply_markup=add_channel_button)
    else:
        current_date = datetime.today()
        scheduled_dates = get_scheduled_times(user_id)  # Fetch scheduled dates from the database
        calendar_buttons = generate_calendar(current_date, scheduled_dates)  # Pass scheduled dates

        await message.answer("<b>–ö–û–ù–¢–ï–ù–¢ –ü–õ–ê–ù:</b>\n\n–í —Ü—å–æ–º—É —Ä–æ–∑–¥—ñ–ª—ñ –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –∏ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ –ø–æ—Å—Ç–∏.", parse_mode='HTML', reply_markup=calendar_buttons)

@dp.message_handler(lambda message: message.text == "–®–∞–±–ª–æ–Ω–∏")
async def templates(message: types.Message):
    user_id = message.from_user.id
    channels = get_user_channels(user_id)
    if not channels:
        add_channel_button = InlineKeyboardMarkup(row_width=1).add(
            InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞–Ω–∞–ª", callback_data="add_channel")
        )
        await message.answer(no_channel_text, reply_markup=add_channel_button)
    else:
        channel_buttons = InlineKeyboardMarkup(row_width=2)
        for channel_id, channel_name in channels:
            channel_buttons.add(InlineKeyboardButton(channel_name, callback_data=f"create_template_{channel_id}"))
        channel_buttons.add(InlineKeyboardButton("–ó–∞–≥–∞–ª—å–Ω—ñ", callback_data="general_templates"))
        
        await message.answer("<b>–®–ê–ë–õ–û–ù–ò:</b>\n\n–ó–±–µ—Ä—ñ–≥–∞–π—Ç–µ —à–∞–±–ª–æ–Ω–∏ –¥–ª—è –ø–æ—Å—Ç—ñ–≤ —Ç–∞ —Ä–µ–∫–ª–∞–º–Ω–∏—Ö –∫—Ä–µ–∞—Ç–∏–≤—ñ–≤.\n\n–í–∏–±–µ—Ä—ñ—Ç—å –¥–ª—è —è–∫–æ–≥–æ –∫–∞–Ω–∞–ª—É –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —à–∞–±–ª–æ–Ω–∏", parse_mode='HTML', reply_markup=channel_buttons)



@dp.message_handler(lambda message: message.text == "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
async def settings(message: types.Message):
    user_id = message.from_user.id
    channels = get_user_channels(user_id)
    if not channels:
        add_channel_button = InlineKeyboardMarkup(row_width=1).add(
            InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞–Ω–∞–ª", callback_data="add_channel")
        )
        await message.answer(no_channel_text, reply_markup=add_channel_button)
    else:
        channel_buttons = InlineKeyboardMarkup(row_width=2)
        for channel_id, channel_name in channels:
            channel_buttons.add(InlineKeyboardButton(channel_name, callback_data=f"create_post_{channel_id}"))
        channel_buttons.add(InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞–Ω–∞–ª", callback_data="add_channel"))
        channel_buttons.add(InlineKeyboardButton(f"–ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å –ö–∏—ó–≤ (UTC+3): {current_time_kiev}", callback_data="timezone_kiev"))
        
        await message.answer("<b>–ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø:</b>\n\n–í —Ü—å–æ–º—É —Ä–æ–∑–¥—ñ–ª—ñ –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞ —Ç–∞–∫–æ–∂ –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –∫–∞–Ω–∞–ª –≤ @PostponedPosterBot.", parse_mode='HTML', reply_markup=channel_buttons)


@dp.message_handler(lambda message: message.text == "–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å üíª")
@dp.throttled(antiflood, rate=1)
async def admin_panel(message: types.Message):
    user_id = message.from_user.id
    if user_id in administrators:
        keyboard = admin_keyboard()
        await message.answer("–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å üíª", reply_markup=keyboard)